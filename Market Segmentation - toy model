{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Market Segmentation </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>For the following dataset, please determine the best market segmentations for the data below - make sure to plot and explain your results when possible. The dataset is comprised of Satisfaction (discrete) and Loyalty (continuous). Please explain any considerations/assumptions you make as well as any conclusions you draw from the data. Think about these segmentations and think about what other kinds of data that might also lead to a more insightful analysis. Please include all things you tried - both what worked, and what didn't and why (very important).\n",
    "Please upload your results to Github and email it back to us. Thank you.</p>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ The idea of Market Segmentation is to breaking up people who use your product into discrete groups and then treat them regarding designing the new product accordingly. For instance, a chocolate company can have consumers in different categories, such as \"conservative\" chocolate lovers (customers who only like plane milk or dark chocolate but don't like any other new  textures or tastes), \"adventurous\" chocolate lovers (customers who love to try and experience different textures in a chocolate, say pretzel blended with chocolate or dried fruit in chocolates). When a company decides to launch a new product line or make any other changes to their products, it's to their benefit to have a good understanding about their customers so thay can predict if the launch is profitable for the company and decide accordingly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# special IPython command to prepare the notebook for matplotlib and other libraries\n",
    "%matplotlib inline \n",
    "\n",
    "import scipy.stats as stats\n",
    "import sklearn\n",
    "import scipy as sp\n",
    "\n",
    "# special matplotlib argument for improved plots\n",
    "from matplotlib import rcParams\n",
    "sns.set_style(\"whitegrid\")\n",
    "sns.set_context(\"poster\")\n",
    "\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.decomposition import PCA\n",
    "# Import regression modules\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "#from __future__ import print_function\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import silhouette_samples, silhouette_score\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import svm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ In the next few cells, I am getting to know my data and check my data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction,Loyalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4,-1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6,-0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5,-0.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7,-0.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4,1.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Satisfaction,Loyalty\n",
       "0              4,-1.33\n",
       "1              6,-0.28\n",
       "2              5,-0.99\n",
       "3              7,-0.29\n",
       "4               4,1.06"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r'C:\\Users\\Nazanin\\Downloads\\market_data.csv', sep=\"\\t\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ The Satisfaction,Loyalty column need to get separated as well as the comma needs to be removed. This will be done in the \n",
    "next few cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 480 entries, 0 to 479\n",
      "Data columns (total 1 columns):\n",
      "Satisfaction,Loyalty    480 non-null object\n",
      "dtypes: object(1)\n",
      "memory usage: 3.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Satisfaction,Loyalty    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.columns  # I am commenting on the cells that won't be needed to be displayed for a cleaner representation :) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction,Loyalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>3,-0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Satisfaction,Loyalty\n",
       "count                   480\n",
       "unique                   30\n",
       "top                 3,-0.96\n",
       "freq                     16"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object\n"
     ]
    }
   ],
   "source": [
    "print(df.columns.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['4,-1.33', '6,-0.28', '5,-0.99', '7,-0.29', '4,1.06', '1,-1.66',\n",
       "       '10,-0.97', '8,-0.32', '8,1.02', '8,0.68', '10,-0.34', '5,0.39',\n",
       "       '5,-1.69', '2,0.67', '7,0.27', '9,1.36', '8,1.38', '7,1.36',\n",
       "       '7,-0.34', '9,0.67', '10,1.18', '3,-1.69', '4,1.04', '3,-0.96',\n",
       "       '6,1.03', '9,-0.99', '10,0.37', '9,0.03', '3,-1.36', '5,0.73'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Satisfaction,Loyalty'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.indexes.base.Index"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[['Satisfaction','Loyalty']] = df['Satisfaction,Loyalty'].apply(lambda x: pd.Series(str(x).split(\",\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['Satisfaction','Loyalty']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction</th>\n",
       "      <th>Loyalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>-1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>-0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>-0.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Satisfaction Loyalty\n",
       "0            4   -1.33\n",
       "1            6   -0.28\n",
       "2            5   -0.99\n",
       "3            7   -0.29\n",
       "4            4    1.06"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ The above data set is now ready for the next data cleaning up procedures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Satisfaction', 'Loyalty'], dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction</th>\n",
       "      <th>Loyalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>480</td>\n",
       "      <td>480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>64</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Satisfaction Loyalty\n",
       "count           480     480\n",
       "unique           10      25\n",
       "top               7   -0.34\n",
       "freq             64      32"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(df.columns.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#type(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 480 entries, 0 to 479\n",
      "Data columns (total 2 columns):\n",
      "Satisfaction    480 non-null object\n",
      "Loyalty         480 non-null object\n",
      "dtypes: object(2)\n",
      "memory usage: 7.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Let's switch the data type of the columns from object to float (I could change the Satisfaction to integer as well)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4\n",
       "1    6\n",
       "2    5\n",
       "3    7\n",
       "4    4\n",
       "Name: Satisfaction, dtype: int32"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Satisfaction.astype('int').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     480\n",
       "unique     10\n",
       "top         7\n",
       "freq       64\n",
       "Name: Satisfaction, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Satisfaction.describe() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['Satisfaction'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Satisfaction'] = df.Satisfaction.astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    480.000000\n",
       "mean       6.400000\n",
       "std        2.579508\n",
       "min        1.000000\n",
       "25%        4.000000\n",
       "50%        7.000000\n",
       "75%        9.000000\n",
       "max       10.000000\n",
       "Name: Satisfaction, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Satisfaction.describe()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0   -1.33\n",
       "1   -0.28\n",
       "2   -0.99\n",
       "3   -0.29\n",
       "4    1.06\n",
       "Name: Loyalty, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Loyalty.astype('float').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Loyalty'] = df.Loyalty.astype('float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    480.000000\n",
       "mean       0.001000\n",
       "std        1.000434\n",
       "min       -1.690000\n",
       "25%       -0.970000\n",
       "50%        0.150000\n",
       "75%        1.020000\n",
       "max        1.380000\n",
       "Name: Loyalty, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Loyalty.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ After fixing the data types and splitting the columns and other house keepings, let's see how the data looks like.\n",
    "\n",
    "### Data Visualization\n",
    "\n",
    "+ Plotting a scatter plot is always a good idea since it gives a good visualization on a 2D plane on how the data is scattered. Since we only have 2 columns here, only one scatter plot can be done. Moreover, since there are only 30 unique data points in our data set, there is a substantial level of overlap on the scatter plot. Therefore, we are going to plot the data points on a 2D plane with various plots, including swarmplot, jitter, etc. \n",
    "\n",
    "+ It is worth noting that the swarmplot is only good for one axis being categorical variable but we will plot it here for the record."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.Satisfaction, df.Loyalty, s=2)\n",
    "plt.xlabel('Satisfaction')\n",
    "plt.ylabel('Loyalty')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.swarmplot(x = 'Satisfaction', y='Loyalty' , data = df)\n",
    "plt.xlabel('Satisfaction')\n",
    "plt.ylabel('Loyalty')\n",
    "plt.show()             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.stripplot(x=\"Satisfaction\", y=\"Loyalty\", data=df, jitter=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After getting a bit more familiar with the content of the data, let us continue with data visualization and draw bar charts and histograms: \n",
    "+ Bar chart of Satisfaction (Barplots are graphs that visually display counts of categorical variables)\n",
    "\n",
    "+ Histogram of Loyalty (Histograms are good to check the frequency of each Loyalty label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Satisfaction</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0         count\n",
       "Satisfaction       \n",
       "1                16\n",
       "2                16\n",
       "3                48\n",
       "4                48\n",
       "5                64\n",
       "6                32\n",
       "7                64\n",
       "8                64\n",
       "9                64\n",
       "10               64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table = pd.crosstab(index=df[\"Satisfaction\"], columns=\"count\")\n",
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20c2f32f4a8>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table.plot(kind=\"bar\", figsize=(8,8))  # we can now see the bar plot distribution of the Satidfaction level. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20c2f06de48>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Loyalty'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Now that we plotted various different aspects of the data set (scatter plot to see how they are related), bar plot of a categorical variable to see the number of counts in different categories and histogram of the loyalty, let's start with fitting a linear model (predicting loyalty with satisfaction), which is highly unlikely to be fitted in a linear model, but let's give it a go and see how we can imporve the linear fit using other techniques. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn                        import metrics, svm\n",
    "from sklearn.linear_model           import LogisticRegression\n",
    "from sklearn import preprocessing\n",
    "from sklearn import utils\n",
    "import warnings\n",
    "warnings.filterwarnings(action='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              Satisfaction   Loyalty\n",
      "Satisfaction      1.000000  0.366929\n",
      "Loyalty           0.366929  1.000000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Linear Regression (just to check although highly unlikely to be a good model to fit the data with) \n",
    "# Calculate Peason's R for each feature:\n",
    "correlation = df.corr()\n",
    "sns.regplot(x='Satisfaction', y='Loyalty', data=df, fit_reg = True, scatter_kws={'color': 'C0', 'alpha':0.3, 's':60}, \n",
    "            line_kws={'color': 'C1'})\n",
    "plt.xlabel('Satisfaction')\n",
    "plt.ylabel('Loyalty')\n",
    "plt.title('Loyalty vs Satisfaction');\n",
    "print(correlation)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                Loyalty   R-squared:                       0.135\n",
      "Model:                            OLS   Adj. R-squared:                  0.133\n",
      "Method:                 Least Squares   F-statistic:                     74.37\n",
      "Date:                Wed, 20 Feb 2019   Prob (F-statistic):           9.60e-17\n",
      "Time:                        22:16:59   Log-Likelihood:                -646.09\n",
      "No. Observations:                 480   AIC:                             1296.\n",
      "Df Residuals:                     478   BIC:                             1305.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "================================================================================\n",
      "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------\n",
      "Intercept       -0.9098      0.114     -7.991      0.000      -1.133      -0.686\n",
      "Satisfaction     0.1423      0.017      8.624      0.000       0.110       0.175\n",
      "==============================================================================\n",
      "Omnibus:                     1256.940   Durbin-Watson:                   2.491\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               35.955\n",
      "Skew:                           0.021   Prob(JB):                     1.56e-08\n",
      "Kurtosis:                       1.660   Cond. No.                         18.8\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "m = ols('Loyalty ~ Satisfaction',df).fit()\n",
    "print(m.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ The above summary table of Ordinary Least Squares shows that the linear fit is not a suitable one for this data set.\n",
    "+ Having one feature in the data set, obviously would not be a good candidate for a linear model but at least we checked! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ I really have to delete the following cell but since the question says include what works and what doesn't, I will keep it. \n",
    "+ As discussed earlier, linear regression won't work on this data set. The statistics is shown earlier.\n",
    "+ (all) the column(s) of the dataset is being stored in the X variable (Satisfaction in our case) in the following cell except for the \"Loyalty\", which is the label column. The drop() method drops this column in the following cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.14230924]\n",
      "-0.9097791164658636\n",
      "coefficient of determination: 0.13463668423570374\n"
     ]
    }
   ],
   "source": [
    "X = df.drop('Loyalty', axis = 1) \n",
    "y = df['Loyalty']\n",
    "# This creates a LinearRegression object\n",
    "lm = LinearRegression()\n",
    "lm\n",
    "lm.fit(X, y)  #df.Loyalty\n",
    "print(lm.coef_)\n",
    "print(lm.intercept_)\n",
    "print(\"coefficient of determination: \" + str(lm.score(X, df.Loyalty)))   # coefficient of determination (R^2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Thinking back to the data set we are given, in order to segment the market, we need a way to compare them. To do this we're going to use K-Means clustering (as this method is mainly used for market segmentation). K-means is a way of taking a dataset and finding groups (or clusters) of points that have similar properties. The grouping is such that the distance between all the points and the midpoint of the cluster they belong to is minimized. \n",
    "+ Since we're trying to learn more about the market behavier, we can use their behavior (Loyalty) as a way to group similar minded groups together. We can then study those groups to look for patterns and trends which can help us formulate future behavier. The only thing is that we are given only Satisfaction and Loyalty so there is not so much to play with and dissect but let's see what we can get with what we are given! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ K-means method is an unsupervised ML algorithm. I will now vary the number of my clusters and see the outcomes. Sometimes the number of clusters chosen have a \"local minimum\", meaning that a certain number of clusters gives a bad result compared to one below and one above it so in the following, we start with 2 and then go to 3 to comapre but if n = 2 gives us a better statistcs, we won't stop and we go to n = 4 to see how 4 clusters predict. \n",
    "\n",
    "+ For this data set, it really doesn't make sense to go any number of clusters above 4 (this is mainly by intuition and educated guess)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    272\n",
       "1    208\n",
       "Name: cluster, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster = KMeans(n_clusters=2)   \n",
    "# slice matrix so we only include the 0/1 indicator columns in the clustering\n",
    "df['cluster'] = cluster.fit_predict(df[['Satisfaction', 'Loyalty']])\n",
    "df.cluster.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x17c501fd9b0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x ='Satisfaction', y= 'Loyalty', data = df , hue = 'cluster')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) #there is a good separate here "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.561428322420888"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "silhouette_score(df[['Satisfaction', 'Loyalty']], df.cluster)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    192\n",
       "0    192\n",
       "2     96\n",
       "Name: cluster, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster = KMeans(n_clusters=3)  \n",
    "# slice matrix so we only include the 0/1 indicator columns in the clustering\n",
    "df['cluster'] = cluster.fit_predict(df[['Satisfaction', 'Loyalty']])\n",
    "df.cluster.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x14fbcf88630>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x ='Satisfaction', y= 'Loyalty', data = df , hue = 'cluster')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.473078055293308"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "silhouette_score(df[['Satisfaction', 'Loyalty']], df.cluster) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    160\n",
       "1    128\n",
       "0    112\n",
       "3     80\n",
       "Name: cluster, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster = KMeans(n_clusters=4)    \n",
    "# slice matrix so we only include the 0/1 indicator columns in the clustering\n",
    "df['cluster'] = cluster.fit_predict(df[['Satisfaction', 'Loyalty']])\n",
    "df.cluster.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x14fbd006c88>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x ='Satisfaction', y= 'Loyalty', data = df , hue = 'cluster')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4505537128693986"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "silhouette_score(df[['Satisfaction', 'Loyalty']], df.cluster) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ As we saw, the cluster number n = 2 gave us the best value and the score of 0.56 is actually pretty good! Which means that there is a good separate here with n = 2, going to n = 3 and n = 4 only made it worse. \n",
    "\n",
    "+ Having score of 0.56 for n = 2, K-means model clustering quality is good based on this metric. \n",
    "\n",
    "+ We are going to perform a PCA (Principal Component Analysis) on this data, although knowing ahead of time due to the fact that we only have one feature, the PCA would not be a practical thing to do since we really don't even need to reduce dimensionality. \n",
    "\n",
    "+ Reason for PCA not to be applicable here is that it is used to transform  multi-dimensional dataset into a 2 dimensional dataset while our data set is already having only one feature. The only reason we (I) are (am) doing this is to show this is what I would have done in case I was given a data set with more dimensions :) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction</th>\n",
       "      <th>Loyalty</th>\n",
       "      <th>cluster</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>-1.33</td>\n",
       "      <td>1</td>\n",
       "      <td>2.582913</td>\n",
       "      <td>0.927428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>1</td>\n",
       "      <td>0.440007</td>\n",
       "      <td>0.212967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>1</td>\n",
       "      <td>1.541231</td>\n",
       "      <td>0.752786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.545350</td>\n",
       "      <td>0.383763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1</td>\n",
       "      <td>2.198298</td>\n",
       "      <td>-1.431422</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Satisfaction  Loyalty  cluster         x         y\n",
       "0             4    -1.33        1  2.582913  0.927428\n",
       "1             6    -0.28        1  0.440007  0.212967\n",
       "2             5    -0.99        1  1.541231  0.752786\n",
       "3             7    -0.29        0 -0.545350  0.383763\n",
       "4             4     1.06        1  2.198298 -1.431422"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca = PCA(n_components=2)  \n",
    "df['x'] = pca.fit_transform(df[['Satisfaction' , 'Loyalty']])[:,0]\n",
    "df['y'] = pca.fit_transform(df[['Satisfaction' , 'Loyalty']])[:,1]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20cb5ff92b0>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x ='x', y= 'y', data = df , hue = 'cluster')  \n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) \n",
    "# I should not even plot this but basically this is the plot of my \"reduced in dimensions\"/\"transformed\" data set \n",
    "# that the PCA method gave me. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Loyalty'] = df.Loyalty.astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    480.00000\n",
       "mean       0.10000\n",
       "std        0.65132\n",
       "min       -1.00000\n",
       "25%        0.00000\n",
       "50%        0.00000\n",
       "75%        1.00000\n",
       "max        1.00000\n",
       "Name: Loyalty, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Loyalty'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM \n",
    "+ SVM classifier mostly used in addressing multi-classification problems and is a supervised machine learning classification. The data set we have here doesn't have many features but in genereal, and even in our case, we can predict the satisfaction of the customers based on their loyalty.\n",
    "\n",
    "+ In this data set, we have one feature and one target variable but in general we implement/model the svm classifier with different kernels. The idea of implementing svm classifier is to use the feature(s) to train an svm classifier and use the trained svm model to predict the response variable (Loyalty in our case). \n",
    "\n",
    "+ The kernels that are mentioned above could be linear, RBF, poly(nomial), etc. and we can (should) fine tune/play with SVM regularization parameter (C) and gamma to be able to fine tune variance and bias and their trade off for our model. \n",
    "\n",
    "+ Other things about SVM method for this problem is that it requires normalized data (mean = 0 and std = 1) since it's not scale invariant but since we only have one feature, normalization won't mean anything and in my opinion, the K-mean method thus far could be the best candidate for a ML treatment for this data set. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ We also need to note that since SVM is not scale invariant we need to normalize our data first before implimenting it. \n",
    "+ Now, train our SVM on the training data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import Normalizer\n",
    "X = df.drop('Loyalty', axis = 1) \n",
    "y = df['Loyalty']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = X.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = X.reshape(-1,1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "transformer = Normalizer().fit(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Normalizer(copy=True, norm='l2')\n"
     ]
    }
   ],
   "source": [
    "print(transformer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df[['Satisfaction']]\n",
    "#X = df['Satisfaction']\n",
    "#y = df.Loyalty\n",
    "#C = 1.0  # SVM regularization parameter\n",
    "# SVC with linear kernel\n",
    "#svc = svm.SVC(kernel='linear', C=C).fit(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       0.33      0.38      0.36        13\n",
      "           0       0.63      0.84      0.72        61\n",
      "           1       0.00      0.00      0.00        22\n",
      "\n",
      "   micro avg       0.58      0.58      0.58        96\n",
      "   macro avg       0.32      0.41      0.36        96\n",
      "weighted avg       0.45      0.58      0.50        96\n",
      "\n",
      "[[ 5  8  0]\n",
      " [10 51  0]\n",
      " [ 0 22  0]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC  \n",
    "from sklearn.metrics import classification_report, confusion_matrix  \n",
    "\n",
    "svclassifier = SVC(kernel='linear')  \n",
    "svclassifier.fit(X_train, y_train) \n",
    "y_pred = svclassifier.predict(X_test) \n",
    "#print(y_pred)\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(confusion_matrix(y_test, y_pred))  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       0.69      0.65      0.67        17\n",
      "           0       0.70      0.91      0.79        55\n",
      "           1       0.56      0.21      0.30        24\n",
      "\n",
      "   micro avg       0.69      0.69      0.69        96\n",
      "   macro avg       0.65      0.59      0.59        96\n",
      "weighted avg       0.66      0.69      0.65        96\n",
      "\n",
      "[[11  2  4]\n",
      " [ 5 50  0]\n",
      " [ 0 19  5]]\n"
     ]
    }
   ],
   "source": [
    "# SVC with RBF kernel\n",
    "rbf_svc = svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(X, y)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)\n",
    "svclassifier = SVC(kernel='rbf')  \n",
    "svclassifier.fit(X_train, y_train) \n",
    "y_pred = svclassifier.predict(X_test) \n",
    "#print(y_pred)\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(confusion_matrix(y_test, y_pred))  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  3  0]\n",
      " [10 51  0]\n",
      " [ 2 20  0]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       0.45      0.77      0.57        13\n",
      "           0       0.69      0.84      0.76        61\n",
      "           1       0.00      0.00      0.00        22\n",
      "\n",
      "   micro avg       0.64      0.64      0.64        96\n",
      "   macro avg       0.38      0.54      0.44        96\n",
      "weighted avg       0.50      0.64      0.56        96\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# SVC with polynomial (degree 3) kernel\n",
    "poly_svc = svm.SVC(kernel='poly', degree=3, C=C).fit(X, y)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)\n",
    "svclassifier = SVC(kernel='poly', degree=3)  \n",
    "svclassifier.fit(X_train, y_train) \n",
    "y_pred = svclassifier.predict(X_test) \n",
    "print(confusion_matrix(y_test, y_pred))  \n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ The Kmeans method seems to be the right choice for the problem on hand and as mentioned, the rest of the ML techniques were not suited for this problems, based on different aspects of not having enough number of features, supervised vs unsupervised nature of the problem and reasons as such. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
